<!--
// Copyright 2014, Kevin Akermanis - Sales Engineering, Salesforce.com Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
// - Neither the name of the salesforce.com nor the names of its contributors
//   may be used to endorse or promote products derived from this software
//   without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<apex:component >
    <apex:attribute type="String" name="message" required="false" description="Message to display while map is initializing" />

    <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false" />
   
   <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    
        div.container {
            height: 100%;
        }
    
        div.container h1 {
            display: block; 
            text-align: center; 
            line-height: 100px;
            font-size: 12px;
        }
    
        div#waiting {
            position: absolute; 
            background-color: white;
            left: 0; 
            right: 0;
            width: 100%; 
            height: 100%; 
        }
    
        div#map {
            width: 100%; 
            height: 100%; 
        }
       
   </style>
 
   <div class="container">
        <div id="waiting">
            <h1>
                {!message}
            </h1>
        </div>
        <div id="map"></div>
   </div>

   <script type="text/javascript"> 
    var map;
    var markers = [];
      
    /* This is the public interface of the map.  You can install functions via the component body */
    var mapInterface = {
        <apex:componentBody />
    };
    
    mapInterface.addMarkers = function(results, idField, nameField, addressField) {
        var requests = 0;
        var geocoder = new google.maps.Geocoder();
        
        for (var index = 0; index < results.length; index++) {
            var record = results[index];
            var id = record[idField];
            var name = record[nameField];
            var address = record[addressField];                            
            
            (function(id, name, address) {                
                requests++;

                geocoder.geocode({ address: address }, function(results, status) {
                    // Finished
                    requests--;
            
                    if (status === google.maps.GeocoderStatus.OK) {
                        var marker = new google.maps.Marker({
                            recordId: id,
                            position: results[0].geometry.location, 
                            map: map,
                            title: name,
                            icon: "https://maps.google.com/mapfiles/marker" + String.fromCharCode(markers.length + 65) + ".png"
                        });
       
                        google.maps.event.addListener(marker, 'click', function(event) {
                            if (mapInterface.onMapItemSelected) {
                                mapInterface.onMapItemSelected.call(mapInterface, marker.recordId);
                            }
                        });
       
                        markers.push(marker);
                    }
                    
                    if (requests === 0) {
                        //  Create a new viewpoint bound
                        var bounds = new google.maps.LatLngBounds ();

                        for (var i = 0; i < markers.length; i++) {
                            bounds.extend (markers[i].position);
                        }
               
                        map.fitBounds (bounds);
                    }
                });       
            })(id, name, address);
         }
    }
    
    function initialize() {
        map = new google.maps.Map(document.getElementById("map"), { disableDefaultUI: true, mapTypeId: google.maps.MapTypeId.HYBRID });

        if (navigator.geolocation) {
             navigator.geolocation.getCurrentPosition(function (position) {
                var coords = new google.maps.LatLng(position.coords.latitude, position.coords.longitude); 
                var geocoder = new google.maps.Geocoder();
                 
                markers.push(new google.maps.Marker({
                    position: coords, 
                    map: map,
                    icon: "https://maps.google.com/mapfiles/ms/icons/yellow-dot.png"
                  }));    
                 
                 geocoder.geocode( { latLng: coords }, function(results, status) {
                     var city = "";
                     var address = results[0].formatted_address;
                     var parts = results[0].address_components;
                     
                     for (var index = 0; index < parts.length; index++) {
                         if (parts[index].types[0] === "locality") {
                             city = parts[index].long_name;
                             
                             break;
                         }
                     }
                     
                     if (mapInterface.onMapInitialized) {
                         mapInterface.onMapInitialized.call(mapInterface, position, address, city);
                     }
                     
                    map.setCenter(coords);
                    map.setZoom(16);
                                    
                    document.getElementById("waiting").style.display = "none";
                 });
            });
        }
    }

    google.maps.event.addDomListener(window, 'load', initialize);

</script>
                  
</apex:component>